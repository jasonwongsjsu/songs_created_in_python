import thinkdsp
import numpy as np
import math
from thinkdsp import play_wave
from pydub import AudioSegment
from synth import synthesizer
from seq import sequencer



nyquist = 44100

#________song_1_____________________
 
f1 = 500
# Keys = [0,-4,2,9,1,3,10]
# time_shift = [0,0,.5,1,2,2.5,3]
# time_list = [1,1,1,2,1,1,2]

Keys = [-7,-2 ,8,6,1,-2,-1,10,-5,-1,8,6,3,-2,9,10,-4,-5,-2,9,7,4]
time_shift = [0,.3,.6,.92,1.23,1.69,2,2.3,2.61,3.07,3.38,3.69,4.15,4.46,4.76,5.07,5.53,6,6.3,6.76,7.23,7.53]
time_list = [1,.4,1,2,.5,1,.3,1,.5,1,2,2,.5,1,1,1,2,3,1,.5,.5,.5]

voices = 5
detune_lim = 4

for i in range(0, len(Keys)):
#     if Keys[i] > abs(6):
#         k = Keys[i]//7
#         fshift = f1*2**k
#         r = Keys[i]%7
#     else:
#         r = Keys[i]
#         fshift = f1
    k = Keys[i]//7
    fshift = f1*2**k
    r = Keys[i]%7
    ff = synthesizer.single_shift(fshift,r)
    time = sequencer.time_np(time_list[i], nyquist)
    c = synthesizer.uni_(ff,voices,detune_lim,time)
    c = synthesizer.wave_map(c, nyquist)
    c = sequencer.time_shift(c,time_shift[i])
    if i == 0:
        song_1 = c
    else:
        song_1 = song_1 + c

song_1.write("song_1.wav")


#______________single_kick______

# making kick
f1 = 75
#T - kicks don't last very long
T = .1
time = sequencer.time_np(T,nyquist)

#play around with the intercept numbers to see what you get
trans = np.linspace(1,0,int(T*nyquist))
trans_pitch = np.linspace(0,1,int(T*nyquist))
intercept = .2
kick = 1/4*synthesizer.kick(f1,trans,trans_pitch,time,intercept)
kick = synthesizer.wave_map(kick, nyquist)
kick.write("kick.wav")

#_____________song_2___________________

bpm = 130
bars = 4
barpm = 130/4

#____________kick___________________

kpb = 4 # kicks per bar
kpm = barpm*kpb # kicks per minute
kps = kpm/60 #kicks per second
ks = 1/kps #kick transient
kis = 12 #kicks in song

fk = 50
T2 = .5
time_kick = np.linspace(0,T2,int(T2*nyquist))

#Volume envelope for kick
trans = np.linspace(1,0,int(T2*nyquist))
#pitch envelope for kick
trans_pitch = np.linspace(0,1,int(T2*nyquist))
intercept = .2
kick = 10*synthesizer.kick(fk, trans, trans_pitch, time_kick,intercept)
kick = synthesizer.wave_map(kick,nyquist)
kick_single = kick

for i in range(1,kis):
    kick = kick + sequencer.time_shift(kick_single,i*ks)



# k_l = synthesizer.sin_create(0,time_kick)
# kick = synthesizer.wave_map(kick, nyquist)


#_________Crash_________
cpb = 1 #crashs per bar
cpm = barpm*cpb
cps = cpm/60
cs = 1/cps #crashes in transient
cis = 1 #crashes i nsong


fcrash = 100
A =.001
D = .03
D_A = .5
S = .01
R = 1.2
T2 = A+D+S+R
time = np.linspace(0,T2, int(T2*nyquist))

fm =  [200,250,0,0,0,0]
Amp = [100,100,0,0,0,0]

crash = synthesizer.fm_(fcrash,fm,Amp,time)
env_ = synthesizer.envelope(A,D,D_A,S,R, nyquist)
crash = crash*env_
crash = synthesizer.wave_map(crash,nyquist)
crash_single = crash

for i in range(1,cis):
    crash = crash + sequencer.time_shift(crash_single,i*cs)
song_2 = kick + crash

#_________hats______________
hpb = np.asarray([4,2,4]) #hat per bar
hpm = barpm*hpb
hps = hpm/60
hs = 1/hps #crashes in transient
his = [12,6,12] #hats in song
time_start = [.170,.240,.413]

fhat = [100,500,1000]
A = [.001,.001,.001]
D = [.03,.04,.02]
D_A = [.2,.1,.5]
S = [.01,.05,.001]
R = [.01,.03,.001]
fhatm = [[500,700,0,0,0,0],[100,200,0,0,0,0], [300,200,0,0,0,0]]
Amp = [[100,100,0,0,0,0], [100,500,0,0,0,0], [200,400,0,0,0,0]]

for i in range(0,len(fhat)):
    T3 = A[i]+D[i]+S[i]+R[i]
    time = np.linspace(0,T3, int(T3*nyquist))
    hat_single = synthesizer.fm_(fhat[i],fhatm[i],Amp[i],time)
    env_ = synthesizer.envelope(A[i],D[i],D_A[i],S[i],R[i], nyquist)
    hat_single = hat_single*env_
    hat_single = synthesizer.wave_map(hat_single,nyquist)
    hat = hat_single
    hat = sequencer.time_shift(hat,time_start[i])
    for j in range(1,his[i]):
        hat = hat + sequencer.time_shift(hat_single,j*hs[i]+time_start[i])
    if i == 0:
        hat_combo = hat
    else:
        hat_combo = hat_combo + hat

song_2 = kick + crash + hat_combo

#
sound = AudioSegment.from_file("song_1.wav", format='wav', frame_rate=22050)
sound = sound.set_frame_rate(22050)
sound.export("song_1.wav", format='wav')

song_2.write("song_2.wav")


sound = AudioSegment.from_file("song_2.wav", format='wav', frame_rate=22050)
sound = sound.set_frame_rate(22050)
sound.export("song_2.wav", format='wav')

#___________supersaw?____________________________________________

fsaw = 100
x2_ = 20
T = 1
voices = 4
detune = 5
time = sequencer.time_np(T,nyquist)

for i in range(0,x2_):
    if i == 0:
        fs = synthesizer.sin_create(fsaw,time)
    else:
        fsaw = fsaw*2
        fs = fs + synthesizer.sin_create(fsaw, time)

saw = synthesizer.wave_map(fs, nyquist)
saw.write("saw.wav")

#___________HAT____________________________

fhat = 10000
T3 = 1
# frequency modulation 
fm = [250,3,0,0,0,0]
# Amplitude of fm waves
A = [100,20,0,0,0,0]
time = np.linspace(0,T3, int(T3*nyquist))

hat = 1/10*synthesizer.fm_(fhat,fm,A,time)
hat = synthesizer.wave_map(hat,nyquist)
hat.write("hat.wav")

#_________Bell_______________
f = [250,790,1310, 1829,2356,2914,3426]

A =.001
D = .2
D_A = .5
S = .001
R = 1
T = A+D+S+R

time = sequencer.time_np(T,nyquist)
for i in range(0,len(f)):
    bell_single = synthesizer.sin_create(f[i],time)
    if i == 0:
        bell = bell_single
    else:
        bell = bell + bell_single

bell = bell*synthesizer.envelope(A,D,D_A,S,R,nyquist)
bell = synthesizer.wave_map(bell, nyquist)
bell.write("bell.wav")
